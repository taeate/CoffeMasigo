# 발표 순서

1. 회원가입  → 유효성 검사 , 중복체크 에대해
2. 로그인
3. 아이디찾기 → 유효성 검사
4. 비밀번호찾기
5. 로그인
6. 목록 설명 -20개 까지보여줌
7. 공지숨기기

→ 변경전엔 리스트를 가져올때 같이 가져와서 최신 공지사항 3개만 출력하고 나머지는 일반글을 보여주도록했는데 시각적으로 불편함도있고 사용자가 따로 공지사항 채널에 들어가서 봐야되는 번거로움때문에 분리시켰습니다.  로컬스토리지를 이용하여 공지사항글만 따로 로드시켰습니다.

1. 첨부파일, 이미지 아이콘 표시

→ 글에 filecount가 1개 이상일시 , 글내용에 img 가 있을시 표시

1. 전체글 리스트 최신,추천,조회수 비동기

→ 사용자 편의성 비동기 , ajax , axios , fetch

1. 전체글 리스트 최신,추천,조회수 페이지네이션 비동기

→ 사용자 편의성 비동기 , ajax

1. 전체글 리스트 답글 계층형 비동기 (설명)

→  변경전: 해당글에 답글이 있을경우 답글보기 버튼이 활성화 , 클릭시 해당글에 답글이 보인다. 또 해당 답글에 답글이 있으면 답글 보기를 눌러 또 볼수있다 (post_id 와 parent_post_id) 두가지 필드로 해당글에 parent_post_id 가 post_id 인것들만 1depth 씩 보여줬다.

변경한 이유 :  답글이 30개인경우 하나씩 눌러서 펼쳐보기 불편함.

→ 변경후: 필드를 추가하여 조금 더 쉽게 한번에 다 펼쳐볼수있게 구현했다.

ref (그룹) , re_step(순서) , re_level(들여쓰기) 이 세가지 필드를 추가하여

계층을 구현했다. 

**parent_post_id** : null 인건  최상위 게시글(원글)으로 

**ref**: 원래 게시물의 ID를 나타냅니다. 모든 답글과 답답글은 같은 원글의 ref 값을 공유(그룹)

**re_step**: 원글에 대한 각 답글의 순서를 나타낸다. 원글에 직접 달린 답글은 1부터 시작하고, 답답글은 상위 답글의 re_step에 1을 더한 값이다

**re_level**: 답글의 깊이 또는 계층을 나타냄. 원글은 0이고, 원글에 직접 달린 답글은 1, 그 답글에 달린 답답글은 2가 됩니다. 이 값은 각 답글이 얼마나 깊숙이 있는지를 나타낸다.

1. 전체글 리스트 답글 삭제시 표시

→ 해당답글을 삭제할시 하위 답글을 전부삭제시킬지, 삭제된글이라고 표시할지 고민끝에 후자선택. 이유는 하위에 답글을 작성한 사람이 불편할수있기때문.

1. 전체글 리스트 검색 필터 , 옵션 설정 (검색된 내용도 페이지네이션)

→ 게시글 검색시 시간필터 , 검색옵션을 설정하여 검색을 할수있다.

제목, 내용, 작성자, 제목+내용 검색을 switch 문으로 돌린다.

지난1일 , 지난1주일, 지난1달 , 지난1년 시간 필터로 위와 같이 switch로 문으로 검색하여 데이터를 가져온다.

1. 랭킹소개

→ 글을 가장 많이 쓴사람 , 댓글을 많이 작성한사람, 추천을 제일받은사람을 볼수있다.

해당유저의 post 카운트를 세고 desc 정렬후 limit 1 첫번째거 가져오게 구현했다. 다른것도 마찬가지

1. 글작성 게시판 선택

1. 글작성 에디터

→ toastui 에디터 사용 하였고 , 타입은 ***WYSIWYG 으로 설정.***

<이미지 업로드>

—앞단

**이미지 업로드 훅 (addImageBlobHook)**:

- 사용자가 이미지를 추가할 때 실
- **`FormData`** 객체를 사용하여 서버에 이미지 파일을 전송
- **`fetch`** 함수를 사용하여 서버에 POST 요청을 보냄(**`/posts/write/saveImage`** 경로로).
- 서버의 응답으로 받은 이미지 URL을 **`callback`** 함수를 통해 에디터에 삽입

— 서버단

1. **이미지 파일 검증 및 처리**:
    - **`$_FILES['upload']`**를 통해 업로드된 이미지 파일을 확인
    - 이미지 파일의 임시 경로와 이름을 가져옴
2. **이미지 저장 로직**:
    - **`saveImageFile`** 함수 (또는 메소드)를 호출하여 이미지 파일을 서버에 저장
    - 저장된 이미지의 URL을 생성
3. **CKEditor에 반환할 JSON 응답**:
    - JSON 형식의 응답을 구성하여 업로드된 이미지 정보를 반환.
    - 이 응답은 JavaScript 부분의 **`fetch`** 요청에 대한 응답으로 사용

1. 글작성 첨부파일 (추가, 삭제)

→ 

1. 글디테일 첨부파일 개수체크

→ 

1. 글디테일 첨부파일 다운로드

→ 

1.  글디테일 조회수

→ 

1. 글디테일 본인글 추천

→ 본인이 작성한글은 추천을 못하게 막았습니다. (정책)

session 에 user_id 와  ,  post user_id 가 일치하면 추천 금지

1. 글디테일 공유하기

→ 공유하기 버튼을 누르면 현재 창의 URL을 가져옵니다.

1. 글디테일 댓글작성(글자카운트)

→  댓글을 작성할때 글자수를 제한했습니다. 사용자가 보기 쉽도록 카운트로 즉시 알려줍니다. 

1. 글디테일 댓글작성 계층 설명 ref , re_step , re_level

→ 댓글 작성을 할수있고 댓글 계층을 ref ,re_step,re_level 로 계층을 표시했습니다.  

댓글을 작성할때  최상위 댓글은  parent_comment_id 가 null ,  ref (그룹)을 comment_id 를 갖게하였고

대댓글은 parent_comment_id 가 부모 댓글의 comment_id 를 갖고

ref도 똑같이 부모의 ref 를 갖습니다. 또한 대댓글이므로 re_step + 1 , re_level +1 씩 증가시켜  댓글순서와 댓글들여쓰기 증가시켜 댓글계층을 표현할수있습니다. 

원래 re_step 을 1 증가시켜 뒤로 밀리게 표현

1. **`ref` (Reference)**: 이 필드는 댓글 그룹을 나타냅니다. 최상위 댓글은 자신의 **`comment_id`**를 **`ref`**로 사용합니다. 대댓글의 경우 부모 댓글의 **`ref`**를 상속받아 같은 그룹에 속함을 나타냅니다.
2. **`re_step` (Reply Step)**: 이 필드는 댓글 내에서의 순서를 나타냅니다. 부모 댓글 바로 다음에 위치하는 대댓글은 부모 댓글의 **`re_step`** 값에 1을 더한 값을 갖습니다. 이렇게 함으로써 대댓글이 순차적으로 정렬됩니다.
3. **`re_level` (Reply Level)**: 이 필드는 댓글의 계층 수준을 나타냅니다. 최상위 댓글은 **`re_level`**이 0이고, 대댓글은 부모 댓글의 **`re_level`**에 1을 더한 값을 갖습니다. 이는 댓글이 얼마나 깊게 중첩되었는지를 나타냅니다.

**`re_step`** 필드의 업데이트는 다음과 같은 상황에서 발생합니다:

- 새 대댓글이 추가될 때: 이때 새 대댓글은 부모 댓글의 **`re_step`**에 1을 더한 값을 갖습니다. 하지만, 이렇게 하면 기존에 같은 부모 댓글 아래에 있던 다른 대댓글들과 **`re_step`** 값이 겹칠 수 있습니다. 이를 방지하기 위해, 새 대댓글이 추가될 때마다 해당 **`ref`** 그룹 내에서 새 대댓글의 **`re_step`** 값보다 크거나 같은 모든 댓글의 **`re_step`** 값을 1씩 증가시킵니다. 이렇게 하여 각 댓글의 순서가 유지되며, 새 대댓글이 올바른 위치에 삽입됩니다.

1. 글디테일 댓글수정

→ 기존 내용을 form 에 담아서 사용자가 수정할수있게 구현했습니다.

1. 글디테일 댓글삭제

→ 댓글을 삭제시 답글과 마찬가지로 하위 댓글을 전부 삭제하려했지만 사용자의 불편함이 있을수 있으므로 삭제된 댓글이면 삭제된 댓글입니다라고 표시. db에선 삭제가 된게 아니고 delete_status 필드로 0,1 로 구별해서 보여줄지 안보여줄지 판단.

1. 글 수정

—> 글 수정시 기본적으로 채널은 고정시켜놓았습니다.

에디터안에 기존 글 내용을 가져오고 수정할수있습니다.

기존에 등록된 첨부파일도 보여주고 사용자가 원하면 추가/삭제가 가능합니다.

1. 답글작성

→  답글 쓰기를 누를시 해당 post_id 정보를 가져와 어떤글에 대한 답글인지  보여줍니다. 채널은 해당 post_id 의 채널로 고정이 되어있습니다.

1. 채널목록

→  채널 카테고리로 같은 채널인 글들만 목록별 로 볼수있습니다

1. 채널 최신,조회수,추천수 정렬 , 공지 숨기기

→ 기존 전체글과 같이 동일하게 채널내에서도 정렬과 공지사항을 숨길수있도록 구현했습니다.

1. 채널내 검색

→ 기존 전체글 검색과 같이 채널내에서 검색이 가능하도록 구현했습니다.

검색 input에 channel_id가 있으면 채널검색 , 없으면 전체글 검색

1. 인기글 기준

→  인기글 기준은 해당 글에 댓글수와 추천수를 각각 점수를 매겨서 더한 값을 종합점수로 설정하고 각 글의 종합점수가 제일 높은 순서대로 보여줍니다.

1. 활동페이지

→  내가 쓴글 ,내가 쓴 댓글 , 내가 추천한글을 볼수있는 페이지입니다.

1. 마이페이지

→ 사용자의 정보와 비밀번호변경 그리고 프로필사진변경 ,소개글 변경을 할수있습니다.

1. 마이페이지 프로필사진 변경

→ 

1. **FileReader**: **`FileReader`** 객체를 사용하여 이미지 파일을 비동기적으로 읽습니다. 이를 통해 사용자가 선택한 이미지 파일을 웹 페이지에서 사용할 수 있는 데이터 URL로 변환합니다.
2. **이벤트 처리**: **`change`** 이벤트를 사용하여 파일 입력 필드(**`#file-input`**)에서 파일 선택 이벤트를 감지합니다. 파일 선택 시 **`previewImage`** 함수를 호출하여 미리보기 이미지로 표시합니다.
3. **FormData**: 사용자가 선택한 이미지 파일을 **`FormData`** 객체에 추가합니다. 이렇게 함으로써 선택한 이미지를 서버로 전송할 수 있습니다.
4. **Ajax 통신**: **`$.ajax()`** 함수를 사용하여 서버로 이미지를 업로드합니다. 이 때, **`processData`**와 **`contentType`** 옵션을 **`false`**로 설정하여 FormData 객체를 사용하여 데이터를 전송하고, JSON 형식의 응답을 예상합니다.

1. 마이페이지 비밀번호 변경

1. 마이페이지 소개글 변경

1. 사용자의 경험치

→ 이 경험치는 레벨에 필요한 경험치 입니다.  경험치를 얻는방법은

글작성을하면 +5 , 댓글작성 +2  로 얻을수있고  반대로 삭제시엔 경험치가 감소합니다. 경험치가 100으로 올라갔을시에 경험치를 초기화시키고 레벨을 올릴수있습니다.